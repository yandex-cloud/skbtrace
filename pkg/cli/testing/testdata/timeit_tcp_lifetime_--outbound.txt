sudo BPFTRACE_STRLEN=80 bpftrace -e '
    #include <linux/types.h>
    #include <linux/skbuff.h>

    struct iphdr {
        struct {
            uint8_t ihl_version;
            uint8_t tos;
            uint16_t tot_len;
            uint16_t id;
            uint16_t frag_off;
            uint8_t ttl;
            uint8_t protocol;
            uint16_t check;
            uint32_t saddr;
            uint32_t daddr;
        } __attribute__((packed));
    }

    struct tcphdr {
        struct {
            uint16_t source;
            uint16_t dest;
            uint32_t seq;
            uint32_t ack_seq;
            uint8_t flags2_doff;
            uint8_t flags1;
            uint16_t window;
            uint16_t check;
            uint16_t urg_ptr;
            uint8_t options[8];
        } __attribute__((packed));
    }

    interval:s:60 {
        exit();
    }

    kprobe:dev_queue_xmit {
        $skb = (sk_buff*) arg0;
        $iph = (iphdr*) ($skb->head + $skb->network_header);
        if ($iph->ihl_version == 0x45) {
            if ($iph->protocol == 6) {
                $skb = (sk_buff*) arg0;
                $tcph = (tcphdr*) ($skb->head + $skb->network_header + 20);
                if (($tcph->flags1 & 0x17) == 0x2) {
                    @start_time[$iph->saddr, $iph->daddr, $tcph->source, $tcph->dest] = nsecs;
                }
                if (($tcph->flags1 & 0x17) == 0x1 || ($tcph->flags1 & 0x17) == 0x11 || ($tcph->flags1 & 0x17) == 0x4) {
                    $st = @start_time[$iph->saddr, $iph->daddr, $tcph->source, $tcph->dest];
                    if ($st > 0) {
                        $dt = (nsecs - $st);
                        @ = hist($dt / 1000);
                        delete(@start_time[$iph->saddr, $iph->daddr, $tcph->source, $tcph->dest]);
                    }
                }
            }
        }
    }

    interval:s:1 {
        time();
        print(@);
        clear(@);
    }

    interval:s:5, END {
        clear(@start_time);
    }'
