sudo BPFTRACE_STRLEN=80 bpftrace -e '
    #include <linux/skbuff.h>
    #include <linux/types.h>
    #include <linux/netdevice.h>

    struct iphdr {
        struct {
            uint8_t ihl_version;
            uint8_t tos;
            uint16_t tot_len;
            uint16_t id;
            uint16_t frag_off;
            uint8_t ttl;
            uint8_t protocol;
            uint16_t check;
            uint32_t saddr;
            uint32_t daddr;
        } __attribute__((packed));
    }

    interval:s:60 {
        exit();
    }

    kprobe:__netif_receive_skb_core {
        $pskb = (struct sk_buff**) arg0;
        $skb = *$pskb;
        $netdev = $skb->dev;
        if ($netdev->name == "eth3") {
            $iph = (struct iphdr*) ($skb->head + $skb->network_header);
            if ($iph->ihl_version == 0x45) {
                time("%H:%M:%S.");
                printf("%09ld - kprobe:__netif_receive_skb_core\n", nsecs % 1000000000);
                printf("IP: ihl/ver %x tot_len %d frag_off %d (%s %s) check %x\n", $iph->ihl_version, bswap((uint16)$iph->tot_len), (bswap((uint16)$iph->frag_off) & 0x1fff) * 8, (bswap((uint16)$iph->frag_off) & 0x2000) ? "MF" : "-", (bswap((uint16)$iph->frag_off) & 0x4000) ? "DF" : "-", bswap((uint16)$iph->check));
                printf("IP: id %d ttl %d protocol %d saddr %s daddr %s\n", bswap((uint16)$iph->id), $iph->ttl, $iph->protocol, ntop(2, $iph->saddr), ntop(2, $iph->daddr));
            }
            @hits["recv:filtered"] = count();
        }
        @hits["recv"] = count();
    }'
