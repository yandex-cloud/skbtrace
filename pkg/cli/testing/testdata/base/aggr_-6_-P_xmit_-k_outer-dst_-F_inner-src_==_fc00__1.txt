sudo BPFTRACE_STRLEN=80 bpftrace -e '
    #include <linux/types.h>
    #include <linux/skbuff.h>

    struct ipv6hdr {
        struct {
            uint8_t priority_version;
            uint8_t flow_lbl[3];
            uint16_t payload_len;
            uint8_t nexthdr;
            uint8_t hop_limit;
            union {
                uint8_t  saddr8[16];
                uint16_t saddr16[8];
                uint32_t saddr32[4];
                uint64_t saddr64[2];
            };
            union {
                uint8_t  daddr8[16];
                uint16_t daddr16[8];
                uint32_t daddr32[4];
                uint64_t daddr64[2];
            };
        } __attribute__((packed));
    }

    struct iphdr {
        struct {
            uint8_t ihl_version;
            uint8_t tos;
            uint16_t tot_len;
            uint16_t id;
            uint16_t frag_off;
            uint8_t ttl;
            uint8_t protocol;
            uint16_t check;
            uint32_t saddr;
            uint32_t daddr;
        } __attribute__((packed));
    }

    interval:s:60 {
        exit();
    }

    kprobe:dev_queue_xmit {
        $skb = (sk_buff*) arg0;
        $in_ipv6h = (ipv6hdr*) ($skb->head + $skb->mac_header + 46);
        if ($in_ipv6h->priority_version & 0x60) {
            if ($in_ipv6h->saddr32[0] == 0xfc && $in_ipv6h->saddr32[1] == 0x0 && $in_ipv6h->saddr32[2] == 0x0 && $in_ipv6h->saddr32[3] == 0x1000000) {
                $out_iph = (iphdr*) ($skb->head + $skb->mac_header + 14);
                if ($out_iph->ihl_version == 0x45) {
                    @[ntop(2, $out_iph->daddr)] = count();
                }
                @hits["xmit:filtered"] = count();
            }
        }
        @hits["xmit"] = count();
    }

    interval:s:1 {
        time();
        print(@);
        clear(@);
    }'
